1. Singleton 이란?
	- 단 하나의 인스턴스만을 가지도록 하는 패턴
	- 클래스당 다수의 인스턴스가 생성됨을 방지
	- 생성자가 여러 차례 호출되더라도 실제 생성되는 객체는 최초에 생성된 인스턴스를 반환
	- 즉, 인스턴스가 필요할 때 똑같은 인스턴스를 만들어 내는 것이 아니라 동일(기존) 인스턴스를 사용하게 함
	
2. Singleton을 쓰는 이유
	- 한 클래스에 대해 하나의 인스턴스만 만든 후 게속 재사용하기 때문에 메모리 낭비를 방지
	- 싱글톤으로 만들어진 클래스의 인스턴스는 전역 인스턴스이기 때문에 다른 클래스의 인스턴스들이 데이터를 공유하기 쉬움
	- 재사용시 객체 로딩 시간이 현저하게 줄어 성능이 좋아짐

3. 문제점
	- 객체 지향 설계 원칙에 어긋나(싱글톤 인스턴스가 너무 많은 데이터를 공유시킬 경우 다른 클래스의 인스턴스들 간에 결합도가 높아짐), 수정 및 테스트가 어려워짐
	- 멀티쓰레드 환경에서 동기화 처리를 안하면 인스턴스가 두개가 생성되는 경우도 발생

4. 문법
	
	public class Controller{
		//2. Controller class의 instance를 field로 설정, 즉 자기 본인(class)이 field가 됨
		//why private? 다른 클래스에서의 접근 차단, 현재 클래스 내 method인 getInstance()의 호출시에만 사용 하도록 제한하기 위함
		//why static? static은 해당 class에서 공유되는 자원, Controller라는 모든 기능을 공유받기 위함
		private static Controller instance = new Controller();
		
		//3. Controller class 내 method에서 활용될 service instance를 field로 지정
		//service instance는 Service class에서 1번과 2번을 모두 수행한 후 사용 가능
		//why private? Controller class에서만 접근가능, 타 class에서는 service method 사용 X
		//why no static? Controller 내 다수의 method에서 service를 호출하게 되는데, service의 결과값이 각 method의 목적에 맞게 도출되게끔 하기 위함 
		//				 static으로 정의하면 A method에서 나온 serivce의 결과값이 B method에 공유되어 원치 않는 결과값이 도출될 가능성 존재
		private Service service = Service.getInstance();
		
		//1. constructor 생성 및 현재 class의 생성자 만든 후 getInstance method 만들기
		//향후 다른 class에서 Controller를 singleton instance로 부르기 위함
		//why public? 다른 class에서 접근 가능해야 하므로
		//why static? Controller의 모든 field/method들을 공유받아야 하기 때문
		private Controller(){}
		public static Controller getInstance(){
			return instance;
		}
	}

5. 주의점
	- singleton 적용 전 public static으로 정의된 method들의  접근자들은 모두 public으로 고쳐줘야 함
	  why? 현재 class의 method들이 다른 class 내 다수의 method에서 호출되어 사용된다고 가정한다면,
			static으로 정의되면 A method에서 계산한 결과값이 B method의 계산에 영향을 줄 수 있음
	- public static void main(String [] args){} 내에서 singleton instance를 불러올 때는 private를 붙이면 안됨
	  why? private을 붙일 경우 외부 Console이 해당 기능을 불러오지 못하는 것으로 추정

*참고 사이트
 * https://jeong-pro.tistory.com/86
 * https://wowon.tistory.com/125
 * https://wikidocs.net/228


